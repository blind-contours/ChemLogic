make_groves <- function(subgroup_tree_formula_results,
main_tree_formula_results,
input_data,
filter_type,
outcome_label) {
formulas <- c()
for (i in 1:length(subgroup_tree_formula_results)) {
formulas[i] <- subgroup_tree_formula_results[[i]][[1]]$tree_formula
}
input_data <- input_data %>%
mutate(main_outcome_tree = ifelse(eval(parse(text = main_tree_formula_results$MCMC_main_outcomes_analysis[[1]]$tree_formula[1])), 1, 0))
tree_variables <- c()
for (i in 1:length(formulas)) {
tree_variable <- paste("mol_tree_", i, sep = "")
input_data <- input_data %>%
mutate(!!as.name(tree_variable) := ifelse(eval(parse(text = formulas[i])), 1, 0))
tree_variables[i] <- tree_variable
}
trees_concat <- paste(tree_variables, collapse = "== 1 | ")
trees_concat <- paste(trees_concat, "== 1 ")
input_data <- input_data %>%
mutate(subgroup_trees = ifelse(eval(parse(text = trees_concat)), 1, 0))
input_data <- input_data %>%
mutate(subgroup_tree_w_main = ifelse(subgroup_trees == 1 | main_outcome_tree == 1, 1, 0))
input_data <- input_data %>%
mutate(false_negatives = ifelse(subgroup_trees == 0 & Label_names == 1, 1, 0))
false_neg_controls_subset <- filter(input_data, !!outcome_label == 0) %>% select(contains(filter_type), !!outcome_label)
false_neg_features_subset <- filter(input_data, false_negatives == 1) %>% select(contains(filter_type), !!outcome_label)
false_neg_data <- rbind(false_neg_controls_subset, false_neg_features_subset)
false_neg_outcomes <- false_neg_data %>% select(!!outcome_label)
false_neg_features <- false_neg_data %>% select(contains(filter_type))
set.seed(12222)
MCMC_vars_select_tree_construction <- logreg(
resp = false_neg_outcomes[[1]],
bin = false_neg_features,
type = 1,
select = 2,
ntrees = 1,
kfold = 5,
nleaves = c(4, 10)
)
fp_best_tree_results <- which.min(MCMC_vars_select_tree_construction$allscores[, 1])
fp_tree_formula <- MCMC_vars_select_tree_construction$alltrees[fp_best_tree_results]
tree_formula <- capture.output(fp_tree_formula[[1]])
tree_formula <- gsub(" \\+1 \\* ", "", tree_formula)
tree_formula <- gsub("and", "&", tree_formula)
tree_formula <- gsub("or", "|", tree_formula)
tree_formula <- gsub("not", "!", tree_formula)
for (i in seq(dim(false_neg_features)[2])) {
target <- paste("X", i, sep = "")
target_space <- paste(target, "")
# target <- paste("^", target, sep = "")
target_end <- paste(target, ")", sep = "")
target_start <- paste("\\(", target_space, sep = "")
pubchem_name <- colnames(false_neg_features)[i]
pubchem_name_end <- paste(pubchem_name, ")", sep = "")
pubchem_name_start <- paste("(", pubchem_name, sep = "")
tree_formula <- gsub(target_start, pubchem_name_start, tree_formula)
tree_formula <- gsub(target_end, pubchem_name_end, tree_formula)
}
input_data <- input_data %>%
mutate(fp_formula = ifelse(eval(parse(text = tree_formula[1])), 1, 0))
browser()
input_data <- input_data %>%
mutate(subgroup_trees_w_fp = ifelse(subgroup_trees == 1 | fp_formula == 1, 1, 0))
input_data <- input_data %>%
mutate(subgroup_trees_w_fp_main = ifelse(subgroup_trees == 1 | fp_formula == 1 | main_outcome_tree == 1, 1, 0))
main_tree_results <- caret::confusionMatrix(table(input_data$Label_names, input_data$main_outcome_tree))
subgroup_tree_results <- caret::confusionMatrix(table(input_data$Label_names, input_data$subgroup_trees))
subgroup_main_results <- caret::confusionMatrix(table(input_data$Label_names, input_data$subgroup_tree_w_main))
subgroup_fp_results <- caret::confusionMatrix(table(input_data$Label_names, input_data$subgroup_trees_w_fp))
subgroup_all_results <- caret::confusionMatrix(table(input_data$Label_names, input_data$subgroup_trees_w_fp_main))
return(list(main = main_tree_results,
subgroup = subgroup_tree_results,
subgroup_main = subgroup_main_results,
subgroup_fp = subgroup_fp_results,
subgroup_all = subgroup_all_results))
}
tables <- make_groves(subgroup_tree_formula_results = subgroup_mol_boolean_itx_results,
main_tree_formula_results = main_mol_boolean_itx_results,
input_data = receptor_1_data_wPCs_kgrps,
filter_type = "Pubchem",
outcome_label = quo(Label_names))
input_data$fp_formula
fp_formula
tree_formula
MCMC_vars_select_tree_construction
?logreg
set.seed(12222)
MCMC_vars_select_tree_construction <- logreg(
resp = false_neg_outcomes[[1]],
bin = false_neg_features,
type = 1,
select = 2,
ntrees = 1,
kfold = 5,
nleaves = c(4, 10)
)
dim(false_neg_features)
false_neg_data$Label_names
input_data$Label_names
input_data$false_negatives
set.seed(12222)
MCMC_vars_select_tree_construction <- logreg(
resp = false_neg_outcomes[[1]],
bin = false_neg_features,
type = 1,
select = 2,
ntrees = 1,
kfold = 5,
nleaves = c(6, 10)
)
subgroup_mol_boolean_itx_results <- purrr::pmap(list(receptor_1_MCMC_results_subgroups,
receptor_1_logic_MCMC_results$subgroup_outcomes,
receptor_1_logic_MCMC_results$subgroup_exposures,
receptor_1_logic_MCMC_results$subgroup_names),
.f=create_molecular_tree_var,
couple_thresh = 0,
triple_thresh = 0,
top_MCMC_vars_thresh = 0.5,
binary_data = receptor_1_data_wPCs_kgrps,
make_logic_tree = TRUE,
expand_boolean_grid = FALSE,
filter_type = "Pubchem",
fingerprints = fingerprints,
outcome_label = quo(log_SVM_group),
iters = 10,
subgroup = TRUE)
subgroup_mol_boolean_itx_results
subgroup_mol_boolean_itx_results <- purrr::pmap(list(receptor_1_MCMC_results_subgroups,
receptor_1_logic_MCMC_results$subgroup_outcomes,
receptor_1_logic_MCMC_results$subgroup_exposures,
receptor_1_logic_MCMC_results$subgroup_names),
.f=create_molecular_tree_var,
couple_thresh = 0,
triple_thresh = 0,
top_MCMC_vars_thresh = 0.4,
binary_data = receptor_1_data_wPCs_kgrps,
make_logic_tree = TRUE,
expand_boolean_grid = FALSE,
filter_type = "Pubchem",
fingerprints = fingerprints,
outcome_label = quo(log_SVM_group),
iters = 10,
subgroup = TRUE)
subgroup_mol_boolean_itx_results
#' Load Chemical Fingerprint Data
#'
#' This function loads a file as a matrix. All explanatory data should be binary,
#' indicating presence or absence of a bit structure, the first column
#' should have the chemical name in order to join on additional physical data late.
#'
#' @param path Path to the input file
#' @param file_type type of file (xlsx, csv, or txt)
#' @return A matrix
#' @export
#'
run_tree_construction <- function(resp,
mol_tree_vars,
binary_data) {
#browser()
if (dim(mol_tree_vars)[2] == dim(binary_data)[2]) {
MCMC_vars_select_tree_construction <- logreg(
resp = resp,
bin = mol_tree_vars,
type = 1,
select = 2,
ntrees = 1,
kfold = 5,
nleaves = c(1,10)
)
} else {
MCMC_vars_select_tree_construction <- logreg(
resp = resp,
bin = mol_tree_vars,
type = 1,
select = 2,
ntrees = 1,
kfold = 5,
nleaves = c(1,dim(mol_tree_vars)[2])
)
}
#browser()
#names(mol_tree_vars) <- paste0('X', 1:(ncol(mol_tree_vars)))
min_model_indx <- which.min(MCMC_vars_select_tree_construction$allscores[,1])
tree_formula <- MCMC_vars_select_tree_construction$alltrees[min_model_indx][[1]]
tree_formula <- capture.output(tree_formula)
tree_formula <- gsub(" \\+1 \\* ", "", tree_formula)
tree_formula <- gsub("and", "&", tree_formula)
tree_formula <- gsub("or", "|", tree_formula)
tree_formula <- gsub("not", "!", tree_formula)
#tree_formula <- gsub("X", "PubchemFP", tree_formula)
for (i in seq(dim(mol_tree_vars)[2])) {
target <- paste('X',i, sep ="")
target_space <- paste(target, "")
#target <- paste("^", target, sep = "")
target_end <- paste(target, ')', sep = "")
target_start <- paste('\\(', target_space,  sep = "")
pubchem_name <- colnames(mol_tree_vars)[i]
pubchem_name_end <-paste(pubchem_name, ')', sep = "")
pubchem_name_start <-paste('(', pubchem_name, sep = "")
tree_formula <- gsub(target_start, pubchem_name_start, tree_formula)
tree_formula <- gsub(target_end, pubchem_name_end, tree_formula)
#print(i)
#print(tree_formula)
}
binary_data_w_mol_tree_var <- mol_tree_vars %>%
mutate(mol_tree_var = ifelse(eval(parse(text = tree_formula)), 1, 0)) %>%
select(mol_tree_var)
#outcome <- binary_data %>% select(!!outcome_label)
#outcome <- as.vector(outcome[[1]])
xtable <- table(binary_data_w_mol_tree_var$mol_tree_var, resp)
if (dim(xtable)[1] > 1) {
xtable_cm <- caret::confusionMatrix(xtable)
sensitivity <- xtable_cm$byClass[1]
specificity <- xtable_cm$byClass[2]
balanced_accuracy <- xtable_cm$byClass[11]
} else {
balanced_accuracy <- 0
sensitivity <- 0
specificity <-0
}
return(list(
tree_formula = tree_formula,
data_w_tree_variable = binary_data_w_mol_tree_var,
balanced_accuracy = balanced_accuracy[[1]],
sensitivity = sensitivity[[1]],
specificity = specificity[[1]],
table = xtable
))
}
create_molecular_tree_var <- function(.x,
.y,
.z,
.a,
couple_thresh = 0.7,
triple_thresh = 0.5,
top_MCMC_vars_thresh = 0.8,
binary_data,
make_logic_tree = TRUE,
expand_boolean_grid = FALSE,
filter_type = "Pubchem",
fingerprints,
outcome_label,
iters,
subgroup = TRUE,
subgroup_outcome_data) {
#browser()
MCMC_results <- .x
top_individual_vars <- subset(MCMC_results$vars_in_iterations, fraction >= top_MCMC_vars_thresh)
ij_interactions_top <- subset(MCMC_results$ij_interactions, fraction >= couple_thresh)
ijk_interactions_top <- subset(MCMC_results$ijk_interactions, fraction >= triple_thresh)
vars_ind_top <- as.vector(top_individual_vars$Bit_Substructure)
ij_vars_top <- c(as.vector(ij_interactions_top$`Bit Structure 1`), as.vector(ij_interactions_top$`Bit Structure 2`))
ijk_vars_top <- c(as.vector(ijk_interactions_top$`Bit Structure 1`), as.vector(ijk_interactions_top$`Bit Structure 2`),
as.vector(ijk_interactions_top$`Bit Structure 3`))
#browser()
vars_to_use <- unique(c(vars_ind_top, ij_vars_top, ijk_vars_top))
if (subgroup) {
binary_data_exposures <- .z
subgroup_names <- .a
#browser()
binary_data  <- filter(binary_data, Name %in% subgroup_names$Name)
binary_data <- binary_data %>% select(contains(filter_type))
colnames(binary_data) <- fingerprints
pubchem_match_idxs <- match(vars_to_use, colnames(binary_data))
pubchem_names <- colnames(binary_data_exposures)[pubchem_match_idxs]
mol_tree_vars <- binary_data_exposures %>% select(pubchem_names)
browser()
if(length(mol_tree_vars) <= 5){
mol_tree_vars <- binary_data_exposures
} else {mol_tree_vars <- mol_tree_vars}
mol_tree_outcome <- .y
} else{
binary_data_exposures <- binary_data %>% select(contains(filter_type))
binary_data_exposures_unlabeled <- binary_data_exposures
colnames(binary_data_exposures) <- fingerprints
pubchem_match_idxs <- match(vars_to_use, colnames(binary_data_exposures))
pubchem_names <- colnames(binary_data_exposures_unlabeled)[pubchem_match_idxs]
mol_tree_vars <- binary_data_exposures_unlabeled %>% select(pubchem_names)
mol_tree_outcome <- binary_data %>% select(!!(outcome_label))
mol_tree_outcome <- mol_tree_outcome[[1]]
binary_data_exposures <- binary_data_exposures_unlabeled
}
mol_tree_outcome <- as.vector(mol_tree_outcome)
if (make_logic_tree) {
MC_results <- purrr::map(seq_len(iters), ~run_tree_construction(resp = mol_tree_outcome,
mol_tree_vars = mol_tree_vars,
binary_data = binary_data_exposures))
#browser()
max_accuracy_idx <- which.max(sapply(MC_results, `[[`, "balanced_accuracy"))
best_tree_results <- MC_results[max_accuracy_idx]
} else {
## run expand_boolean_grid if size isn't too large
}
return(best_tree_results)
}
subgroup_mol_boolean_itx_results <- purrr::pmap(list(receptor_1_MCMC_results_subgroups,
receptor_1_logic_MCMC_results$subgroup_outcomes,
receptor_1_logic_MCMC_results$subgroup_exposures,
receptor_1_logic_MCMC_results$subgroup_names),
.f=create_molecular_tree_var,
couple_thresh = 0,
triple_thresh = 0,
top_MCMC_vars_thresh = 0.5,
binary_data = receptor_1_data_wPCs_kgrps,
make_logic_tree = TRUE,
expand_boolean_grid = FALSE,
filter_type = "Pubchem",
fingerprints = fingerprints,
outcome_label = quo(log_SVM_group),
iters = 10,
subgroup = TRUE)
vars_to_use
max_accuracy_idx
best_tree_results
subgroup_mol_boolean_itx_results <- purrr::pmap(list(receptor_1_MCMC_results_subgroups,
receptor_1_logic_MCMC_results$subgroup_outcomes,
receptor_1_logic_MCMC_results$subgroup_exposures,
receptor_1_logic_MCMC_results$subgroup_names),
.f=create_molecular_tree_var,
couple_thresh = 0,
triple_thresh = 0,
top_MCMC_vars_thresh = 0.3,
binary_data = receptor_1_data_wPCs_kgrps,
make_logic_tree = TRUE,
expand_boolean_grid = FALSE,
filter_type = "Pubchem",
fingerprints = fingerprints,
outcome_label = quo(log_SVM_group),
iters = 10,
subgroup = TRUE)
top_individual_vars
View(top_individual_vars)
View(ij_interactions_top)
View(ijk_interactions_top)
dim(mol_tree_vars)
best_tree_results
#' Load Chemical Fingerprint Data
#'
#' This function loads a file as a matrix. All explanatory data should be binary,
#' indicating presence or absence of a bit structure, the first column
#' should have the chemical name in order to join on additional physical data late.
#'
#' @param path Path to the input file
#' @param file_type type of file (xlsx, csv, or txt)
#' @return A matrix
#' @export
#'
run_tree_construction <- function(resp,
mol_tree_vars,
binary_data) {
#browser()
if (dim(mol_tree_vars)[2] == dim(binary_data)[2]) {
MCMC_vars_select_tree_construction <- logreg(
resp = resp,
bin = mol_tree_vars,
type = 1,
select = 2,
ntrees = 1,
kfold = 5,
nleaves = c(1,10)
)
} else {
MCMC_vars_select_tree_construction <- logreg(
resp = resp,
bin = mol_tree_vars,
type = 1,
select = 2,
ntrees = 1,
kfold = 5,
nleaves = c(1,dim(mol_tree_vars)[2])
)
}
#browser()
#names(mol_tree_vars) <- paste0('X', 1:(ncol(mol_tree_vars)))
min_model_indx <- which.min(MCMC_vars_select_tree_construction$allscores[,1])
tree_formula <- MCMC_vars_select_tree_construction$alltrees[min_model_indx][[1]]
tree_formula <- capture.output(tree_formula)
tree_formula <- gsub(" \\+1 \\* ", "", tree_formula)
tree_formula <- gsub("and", "&", tree_formula)
tree_formula <- gsub("or", "|", tree_formula)
tree_formula <- gsub("not", "!", tree_formula)
#tree_formula <- gsub("X", "PubchemFP", tree_formula)
for (i in seq(dim(mol_tree_vars)[2])) {
target <- paste('X',i, sep ="")
target_space <- paste(target, "")
#target <- paste("^", target, sep = "")
target_end <- paste(target, ')', sep = "")
target_start <- paste('\\(', target_space,  sep = "")
pubchem_name <- colnames(mol_tree_vars)[i]
pubchem_name_end <-paste(pubchem_name, ')', sep = "")
pubchem_name_start <-paste('(', pubchem_name, sep = "")
tree_formula <- gsub(target_start, pubchem_name_start, tree_formula)
tree_formula <- gsub(target_end, pubchem_name_end, tree_formula)
#print(i)
#print(tree_formula)
}
binary_data_w_mol_tree_var <- mol_tree_vars %>%
mutate(mol_tree_var = ifelse(eval(parse(text = tree_formula)), 1, 0)) %>%
select(mol_tree_var)
#outcome <- binary_data %>% select(!!outcome_label)
#outcome <- as.vector(outcome[[1]])
xtable <- table(binary_data_w_mol_tree_var$mol_tree_var, resp)
if (dim(xtable)[1] > 1) {
xtable_cm <- caret::confusionMatrix(xtable)
sensitivity <- xtable_cm$byClass[1]
specificity <- xtable_cm$byClass[2]
balanced_accuracy <- xtable_cm$byClass[11]
} else {
balanced_accuracy <- 0
sensitivity <- 0
specificity <-0
}
return(list(
tree_formula = tree_formula,
data_w_tree_variable = binary_data_w_mol_tree_var,
balanced_accuracy = balanced_accuracy[[1]],
sensitivity = sensitivity[[1]],
specificity = specificity[[1]],
table = xtable
))
}
create_molecular_tree_var <- function(.x,
.y,
.z,
.a,
couple_thresh = 0.7,
triple_thresh = 0.5,
top_MCMC_vars_thresh = 0.8,
binary_data,
make_logic_tree = TRUE,
expand_boolean_grid = FALSE,
filter_type = "Pubchem",
fingerprints,
outcome_label,
iters,
subgroup = TRUE,
subgroup_outcome_data) {
#browser()
MCMC_results <- .x
top_individual_vars <- subset(MCMC_results$vars_in_iterations, fraction >= top_MCMC_vars_thresh)
ij_interactions_top <- subset(MCMC_results$ij_interactions, fraction >= couple_thresh)
ijk_interactions_top <- subset(MCMC_results$ijk_interactions, fraction >= triple_thresh)
vars_ind_top <- as.vector(top_individual_vars$Bit_Substructure)
ij_vars_top <- c(as.vector(ij_interactions_top$`Bit Structure 1`), as.vector(ij_interactions_top$`Bit Structure 2`))
ijk_vars_top <- c(as.vector(ijk_interactions_top$`Bit Structure 1`), as.vector(ijk_interactions_top$`Bit Structure 2`),
as.vector(ijk_interactions_top$`Bit Structure 3`))
#browser()
vars_to_use <- unique(c(vars_ind_top, ij_vars_top, ijk_vars_top))
if (subgroup) {
binary_data_exposures <- .z
subgroup_names <- .a
#browser()
binary_data  <- filter(binary_data, Name %in% subgroup_names$Name)
binary_data <- binary_data %>% select(contains(filter_type))
colnames(binary_data) <- fingerprints
pubchem_match_idxs <- match(vars_to_use, colnames(binary_data))
pubchem_names <- colnames(binary_data_exposures)[pubchem_match_idxs]
mol_tree_vars <- binary_data_exposures %>% select(pubchem_names)
#browser()
if(length(mol_tree_vars) <= 5){
mol_tree_vars <- binary_data_exposures
} else {mol_tree_vars <- mol_tree_vars}
mol_tree_outcome <- .y
} else{
binary_data_exposures <- binary_data %>% select(contains(filter_type))
binary_data_exposures_unlabeled <- binary_data_exposures
colnames(binary_data_exposures) <- fingerprints
pubchem_match_idxs <- match(vars_to_use, colnames(binary_data_exposures))
pubchem_names <- colnames(binary_data_exposures_unlabeled)[pubchem_match_idxs]
mol_tree_vars <- binary_data_exposures_unlabeled %>% select(pubchem_names)
mol_tree_outcome <- binary_data %>% select(!!(outcome_label))
mol_tree_outcome <- mol_tree_outcome[[1]]
binary_data_exposures <- binary_data_exposures_unlabeled
}
mol_tree_outcome <- as.vector(mol_tree_outcome)
if (make_logic_tree) {
MC_results <- purrr::map(seq_len(iters), ~run_tree_construction(resp = mol_tree_outcome,
mol_tree_vars = mol_tree_vars,
binary_data = binary_data_exposures))
#browser()
max_accuracy_idx <- which.max(sapply(MC_results, `[[`, "balanced_accuracy"))
best_tree_results <- MC_results[max_accuracy_idx]
} else {
## run expand_boolean_grid if size isn't too large
}
return(best_tree_results)
}
subgroup_mol_boolean_itx_results <- purrr::pmap(list(receptor_1_MCMC_results_subgroups,
receptor_1_logic_MCMC_results$subgroup_outcomes,
receptor_1_logic_MCMC_results$subgroup_exposures,
receptor_1_logic_MCMC_results$subgroup_names),
.f=create_molecular_tree_var,
couple_thresh = 0,
triple_thresh = 0,
top_MCMC_vars_thresh = 0.3,
binary_data = receptor_1_data_wPCs_kgrps,
make_logic_tree = TRUE,
expand_boolean_grid = FALSE,
filter_type = "Pubchem",
fingerprints = fingerprints,
outcome_label = quo(log_SVM_group),
iters = 10,
subgroup = TRUE)
tables <- make_groves(subgroup_tree_formula_results = subgroup_mol_boolean_itx_results,
main_tree_formula_results = main_mol_boolean_itx_results,
input_data = receptor_1_data_wPCs_kgrps,
filter_type = "Pubchem",
outcome_label = quo(Label_names))
input_data$fp_formula
tree_formula
